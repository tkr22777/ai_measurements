# PROJECT 001: React + Next.js + TypeScript + Vercel

## Engineering Standards
- Principal software engineer mindset - quality, organization, readability
- Small incremental changes, single-purpose functions
- TypeScript strict mode, no 'any' types, proper interfaces
- Components <200 lines, single responsibility
- Container/presentation component separation

## Architecture
- **Next.js**: App Router, Server Components default, 'use client' only when needed
- **State**: useState for UI, Context for shared data, React Query for server state
- **API**: Route handlers in app/api/, proper TypeScript, NextRequest/NextResponse
- **Performance**: Image component, React.memo, dynamic imports, code splitting

## Code Standards
- Path mapping: `"@/*": ["./app/*"]`
- Feature-based component organization
- Custom hooks for business logic, no API calls in components
- Proper loading/error states, type guards, branded types
- Environment variables: NEXT_PUBLIC_ for client-side

## Testing & Deployment
- React Testing Library, mock API calls, test business logic
- Vercel CLI: `vercel dev`, environment variables in dashboard
- Never commit .env files, use Edge Runtime when possible

# ============================================================================
# CURSOR RULES BOUNDARY - DO NOT MODIFY ABOVE THIS LINE
# All future additions to this .cursorrules file must be added below this line
# ============================================================================

## Commit Messages
- Single line, max 72 chars, imperative verb
- "Fix/Add/Update/Remove/Refactor" + specific change
- No verbose multi-line descriptions

## Communication
- Concise and direct, lead with answer
- Focus on actionable info, assume technical understanding
- Brief explanations, bullet points over paragraphs

## README Guidelines
- Max 50 lines, developer-focused only
- Include: setup, env vars, scripts, status, API endpoints
- No marketing copy, deployment details, or verbose explanations

## API Design
- Consolidate CRUD operations into single REST endpoints
- Use proper HTTP methods: GET, POST, PUT/PATCH, DELETE
- Never create separate endpoints for operations on same resource
- Example: `/api/images` handles GET, POST, DELETE - not `/api/upload`, `/api/delete-image`

## Styling Standards
- **Single approach**: Use `utils/styles.ts` with `cn()` utility and `styles` object
- **No CSS files**: Avoid CSS modules, separate CSS files, or complex styling folders
- **Composable classes**: Combine reusable styles with custom Tailwind classes
- **Rule**: If same 3+ classes appear together 2+ times, add to `styles` object
- **Usage**: `cn(styles.card.base, styles.card.shadow, 'custom-class')`
- **Keep simple**: One utility file, no UI component folders, readable components

## Component Organization
- **Directory structure**: Complex components (>50 lines) get own directory with index.tsx
- **Consistent pattern**: index.tsx, types.ts, utils.ts, hooks.ts as needed
- **No duplicates**: Single source of truth for each component
- **Modular imports**: Clean import paths using directory structure

## Cursor Rules Management
- Never modify content above boundary line
- Add new rules below with clear section headers 